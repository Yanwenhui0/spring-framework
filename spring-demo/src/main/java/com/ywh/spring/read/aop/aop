# Spring-AOP

## AOP的基本概念
- Aspect(切面):通常是一个类，里面可以定义切入点和通知
- JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用
- Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around
- Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式
- AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类

## 通知方法
- 前置通知:在我们执行目标方法之前运行(@Before)
- 后置通知:在我们目标方法运行结束之后 ,不管有没有异常(@After)
- 环绕通知:需要手动执行joinPoint.procced()(@Around)
- 返回通知:在我们的目标方法正常返回值后运行(@AfterReturning)
- 异常通知:在我们的目标方法出现异常后运行(@AfterThrowing)

## Aop 示例
见类 : com.ywh.spring.read.aop.aopHandle.UserAspects

注意使用 @EnableAspectJAutoProxy 注解开启 AOP 代理

```java
    // 切面   com.ywh.spring.read.aop.service 包中 所有类 所有方法
    @Pointcut("execution(* com.ywh.spring.read.aop.service..*.*(..))")
```

## 源码分析
代理流程：
```java
org.springframework.context.support.AbstractApplicationContext.refresh()
org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization() 
org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons() 
org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean()
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean()
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean()
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean()
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization()
org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.postProcessAfterInitialization()
org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization()
org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary()
org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy()
org.springframework.aop.framework.ProxyFactory.getProxy()
org.springframework.aop.framework.ProxyCreatorSupport.createAopProxy()
org.springframework.aop.framework.DefaultAopProxyFactory.createAopProxy()
    org.springframework.aop.framework.ObjenesisCglibAopProxy.ObjenesisCglibAopProxy
    org.springframework.aop.framework.JdkDynamicAopProxy.JdkDynamicAopProxy
```

是 JDK 动态代理 还是 CGLIB 动态代理？

上代码: 
```java
	/**
	 * 什么时候是 JDK 动态代理，什么时候是 CGLIB 动态代理
	 * if (!IN_NATIVE_IMAGE &&
	 * 		(config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)))
	 *
	 * true && ( false || proxyTargetClass：可控制 - 默认 false || 是否为类)
	 * 类：一定是 CGLIB 动态代理
	 * 接口：默认为 JDK 动态代理， 可通过开关控制
	 *
	 * @param config the AOP configuration in the form of an
	 * AdvisedSupport object
	 * @return
	 * @throws AopConfigException
	 */
	@Override
	public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
		// TODO yanwenhui :: 判断用 JDK 动态代理 还是 CGLIB 动态代理
		if (!IN_NATIVE_IMAGE &&
				(config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config))) {
			Class<?> targetClass = config.getTargetClass();
			if (targetClass == null) {
				throw new AopConfigException("TargetSource cannot determine target class: " +
						"Either an interface or a target is required for proxy creation.");
			}
			if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {
				return new JdkDynamicAopProxy(config);
			}
			return new ObjenesisCglibAopProxy(config);
		}
		else {
			return new JdkDynamicAopProxy(config);
		}
	}
```

总结: 
- 类: CGLIB 动态代理
- 接口: 默认 JDK 动态代理，可以通过 proxyTargetClass 参数选择使用 CGLIB

---

为什么 JDK 动态代理只能代理接口？？？

- sun.misc.ProxyGenerator => 代理类生成
- JDK 动态代理生成生成的代理类要继承 Proxy
- Java 是单继承多实现，所以继承了 Proxy 类，就只能实现目标接口，而不能再继承目标类